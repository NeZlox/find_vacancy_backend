"""initial_migration

Revision ID: f8ba1428581c
Revises: 
Create Date: 2024-05-28 20:48:43.162905

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f8ba1428581c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('skills',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('skill', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('skill', name='skills_unique_skill')
    )
    op.create_table('urls',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('url', sa.String(length=256), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('url', name='urls_unique_url')
    )
    op.create_table('vacancies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('salary', sa.String(length=255), nullable=True),
    sa.Column('experience', sa.String(length=255), nullable=True),
    sa.Column('work_format', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('vacancy_vector', sa.String(length=255), nullable=True),
    sa.Column('id_url', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=False),
    sa.ForeignKeyConstraint(['id_url'], ['urls.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_url', name='vacancies_unique_id_url')
    )
    op.create_table('skills_to_vacancy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_skill', sa.Integer(), nullable=False),
    sa.Column('id_vacancy', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_skill'], ['skills.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_vacancy'], ['vacancies.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_skill', 'id_vacancy', name='skills_to_vacancy_unique_id_skill_id_vacancy')
    )
    # ### end Alembic commands ###


    op.execute("""
    CREATE OR REPLACE FUNCTION update_updated_at()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = TIMEZONE('utc', NOW());
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    """)



    op.execute("""
    CREATE TRIGGER trigger_update_urls_updated_at
    BEFORE UPDATE ON urls
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at();
    """)

    op.execute("""
    CREATE TRIGGER trigger_update_vacancies_updated_at
    BEFORE UPDATE ON vacancies
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at();
    """)

    op.execute("""
    CREATE TRIGGER trigger_update_skills_updated_at
    BEFORE UPDATE ON skills
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at();
    """)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('skills_to_vacancy')
    op.drop_table('vacancies')
    op.drop_table('urls')
    op.drop_table('skills')
    # ### end Alembic commands ###

    #op.execute("DROP TRIGGER IF EXISTS trigger_update_urls_updated_at;")
    #op.execute("DROP TRIGGER IF EXISTS trigger_update_vacancies_updated_at;")
    #op.execute("DROP TRIGGER IF EXISTS trigger_update_skills_updated_at;")

    op.execute("DROP FUNCTION IF EXISTS update_updated_at;")